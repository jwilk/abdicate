#!/usr/bin/python3

# Copyright © 2014 Jakub Wilk <jwilk@jwilk.net>
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the “Software”), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import argparse
import re
import subprocess as ipc
import tempfile
import urllib

try:
    import readline
except ImportError:
    pass

import requests
import urllib3

recaptcha_script_re = re.compile(
    re.escape('http://www.google.com/recaptcha/api/challenge?k=') + '([0-9A-Za-z_-]+)'
)

recaptcha_noscript_prefix = (
    'http://www.google.com/recaptcha/api/noscript?k='
)

recaptcha_image_re = re.compile(
    'image[?]c=([0-9A-Za-z_-]+)'
)

class ScrapingError(RuntimeError):
    pass

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument('--debug', action='store_true')
    options = ap.parse_args()
    if options.debug:
        urllib3.add_stderr_logger()
    session = requests.Session()
    session.trust_env = False
    session.headers['User-Agent'] = 'Mozilla/5.0 (Windows NT 6.1; rv:17.0) Gecko/20100101 Firefox/17.0'
    base_url = 'http://bdi.free.aero2.net.pl:8080/'
    while True:
        response = session.post(base_url, data=dict(viewForm='true'))
        match = recaptcha_script_re.search(response.text)
        if match is None:
            raise ScrapingError
        url = recaptcha_noscript_prefix + match.group(1)
        response = session.get(url)
        match = recaptcha_image_re.search(response.text)
        if match is None:
            raise ScrapingError
        url = urllib.parse.urljoin(url, match.group(0))
        challange = match.group(1)
        response = session.get(url)
        with tempfile.NamedTemporaryFile(prefix='aero2.', suffix='.jpeg') as img:
            img.write(response.content)
            img.flush()
            cmdline = ['see', img.name]
            if options.debug:
                cmdline[1:1] = ['--debug']
            ipc.check_call(cmdline)
        captcha = input('captcha: ')
        response = session.post(base_url, data=dict(
            viewForm=True,
            recaptcha_challenge_field=challange,
            recaptcha_response_field=captcha,
        ))
        if b'Zrestartuj' in response.content:
            break

if __name__ == '__main__':
    main()

# vim:ts=4 sw=4 et
